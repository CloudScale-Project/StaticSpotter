/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.reclipse.behavior.specification.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.reclipse.behavior.specification.util.BehavioralpatternAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BehavioralpatternItemProviderAdapterFactory extends BehavioralpatternAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
   /**
    * This keeps track of the root adapter factory that delegates to this adapter factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ComposedAdapterFactory parentAdapterFactory;

   /**
    * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IChangeNotifier changeNotifier = new ChangeNotifier();

   /**
    * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Collection<Object> supportedTypes = new ArrayList<Object>();

   /**
    * This constructs an instance.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public BehavioralpatternItemProviderAdapterFactory()
   {
      supportedTypes.add(IEditingDomainItemProvider.class);
      supportedTypes.add(IStructuredItemContentProvider.class);
      supportedTypes.add(ITreeItemContentProvider.class);
      supportedTypes.add(IItemLabelProvider.class);
      supportedTypes.add(IItemPropertySource.class);
   }

   /**
    * This keeps track of the one adapter used for all {@link org.reclipse.behavior.specification.BPAnyObject} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected BPAnyObjectItemProvider bpAnyObjectItemProvider;

   /**
    * This creates an adapter for a {@link org.reclipse.behavior.specification.BPAnyObject}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createBPAnyObjectAdapter()
   {
      if (bpAnyObjectItemProvider == null)
      {
         bpAnyObjectItemProvider = new BPAnyObjectItemProvider(this);
      }

      return bpAnyObjectItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.reclipse.behavior.specification.BPObject} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected BPObjectItemProvider bpObjectItemProvider;

   /**
    * This creates an adapter for a {@link org.reclipse.behavior.specification.BPObject}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createBPObjectAdapter()
   {
      if (bpObjectItemProvider == null)
      {
         bpObjectItemProvider = new BPObjectItemProvider(this);
      }

      return bpObjectItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.reclipse.behavior.specification.BPSetObject} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected BPSetObjectItemProvider bpSetObjectItemProvider;

   /**
    * This creates an adapter for a {@link org.reclipse.behavior.specification.BPSetObject}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createBPSetObjectAdapter()
   {
      if (bpSetObjectItemProvider == null)
      {
         bpSetObjectItemProvider = new BPSetObjectItemProvider(this);
      }

      return bpSetObjectItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.reclipse.behavior.specification.BPAssignment} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected BPAssignmentItemProvider bpAssignmentItemProvider;

   /**
    * This creates an adapter for a {@link org.reclipse.behavior.specification.BPAssignment}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createBPAssignmentAdapter()
   {
      if (bpAssignmentItemProvider == null)
      {
         bpAssignmentItemProvider = new BPAssignmentItemProvider(this);
      }

      return bpAssignmentItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.reclipse.behavior.specification.BehavioralPattern} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected BehavioralPatternItemProvider behavioralPatternItemProvider;

   /**
    * This creates an adapter for a {@link org.reclipse.behavior.specification.BehavioralPattern}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createBehavioralPatternAdapter()
   {
      if (behavioralPatternItemProvider == null)
      {
         behavioralPatternItemProvider = new BehavioralPatternItemProvider(this);
      }

      return behavioralPatternItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.reclipse.behavior.specification.BPMessage} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected BPMessageItemProvider bpMessageItemProvider;

   /**
    * This creates an adapter for a {@link org.reclipse.behavior.specification.BPMessage}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createBPMessageAdapter()
   {
      if (bpMessageItemProvider == null)
      {
         bpMessageItemProvider = new BPMessageItemProvider(this);
      }

      return bpMessageItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.reclipse.behavior.specification.BPArgument} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected BPArgumentItemProvider bpArgumentItemProvider;

   /**
    * This creates an adapter for a {@link org.reclipse.behavior.specification.BPArgument}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createBPArgumentAdapter()
   {
      if (bpArgumentItemProvider == null)
      {
         bpArgumentItemProvider = new BPArgumentItemProvider(this);
      }

      return bpArgumentItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.reclipse.behavior.specification.BPEachFragment} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected BPEachFragmentItemProvider bpEachFragmentItemProvider;

   /**
    * This creates an adapter for a {@link org.reclipse.behavior.specification.BPEachFragment}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createBPEachFragmentAdapter()
   {
      if (bpEachFragmentItemProvider == null)
      {
         bpEachFragmentItemProvider = new BPEachFragmentItemProvider(this);
      }

      return bpEachFragmentItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.reclipse.behavior.specification.BPCatalog} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected BPCatalogItemProvider bpCatalogItemProvider;

   /**
    * This creates an adapter for a {@link org.reclipse.behavior.specification.BPCatalog}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createBPCatalogAdapter()
   {
      if (bpCatalogItemProvider == null)
      {
         bpCatalogItemProvider = new BPCatalogItemProvider(this);
      }

      return bpCatalogItemProvider;
   }

   /**
    * This returns the root adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public ComposeableAdapterFactory getRootAdapterFactory()
   {
      return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
   }

   /**
    * This sets the composed adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
   {
      this.parentAdapterFactory = parentAdapterFactory;
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public boolean isFactoryForType(Object type)
   {
      return supportedTypes.contains(type) || super.isFactoryForType(type);
   }

   /**
    * This implementation substitutes the factory itself as the key for the adapter.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter adapt(Notifier notifier, Object type)
   {
      return super.adapt(notifier, this);
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Object adapt(Object object, Object type)
   {
      if (isFactoryForType(type))
      {
         Object adapter = super.adapt(object, type);
         if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
         {
            return adapter;
         }
      }

      return null;
   }

   /**
    * This adds a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void addListener(INotifyChangedListener notifyChangedListener)
   {
      changeNotifier.addListener(notifyChangedListener);
   }

   /**
    * This removes a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void removeListener(INotifyChangedListener notifyChangedListener)
   {
      changeNotifier.removeListener(notifyChangedListener);
   }

   /**
    * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void fireNotifyChanged(Notification notification)
   {
      changeNotifier.fireNotifyChanged(notification);

      if (parentAdapterFactory != null)
      {
         parentAdapterFactory.fireNotifyChanged(notification);
      }
   }

   /**
    * This disposes all of the item providers created by this factory. 
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void dispose()
   {
      if (bpAnyObjectItemProvider != null) bpAnyObjectItemProvider.dispose();
      if (bpObjectItemProvider != null) bpObjectItemProvider.dispose();
      if (bpSetObjectItemProvider != null) bpSetObjectItemProvider.dispose();
      if (bpAssignmentItemProvider != null) bpAssignmentItemProvider.dispose();
      if (behavioralPatternItemProvider != null) behavioralPatternItemProvider.dispose();
      if (bpMessageItemProvider != null) bpMessageItemProvider.dispose();
      if (bpArgumentItemProvider != null) bpArgumentItemProvider.dispose();
      if (bpEachFragmentItemProvider != null) bpEachFragmentItemProvider.dispose();
      if (bpCatalogItemProvider != null) bpCatalogItemProvider.dispose();
   }

}
